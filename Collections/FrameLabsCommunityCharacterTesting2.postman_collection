{
	"info": {
		"_postman_id": "87f4aeb1-a9f1-4d30-b712-f32c90863f16",
		"name": "FrameLabs Community Character Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "49332072",
		"_collection_link": "https://michael-myers-lab-2-submission.postman.co/workspace/SWENG-465-POSTMAN~e608a5a6-88f8-422c-ad14-2a0448265ed4/collection/42860946-87f4aeb1-a9f1-4d30-b712-f32c90863f16?action=share&source=collection_link&creator=49332072"
	},
	"item": [
		{
			"name": "Get All Community Characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Assert the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Assert the response body is valid JSON",
							"let jsonData;",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        jsonData = pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Assert the response is an array",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"});",
							"",
							"// 4. For each object, assert required properties",
							"pm.test(\"Each object contains required properties\", function () {",
							"    jsonData.forEach(function (item) {",
							"        pm.expect(item).to.have.property(\"_id\");",
							"        pm.expect(item).to.have.property(\"name\");",
							"        pm.expect(item).to.have.property(\"description\");",
							"        pm.expect(item).to.have.property(\"createdAt\");",
							"        pm.expect(item).to.have.property(\"__v\");",
							"    });",
							"});",
							"",
							"// 5. Assert 'name' and 'description' are non-empty strings",
							"pm.test(\"'name' and 'description' are non-empty strings\", function () {",
							"    jsonData.forEach(function (item) {",
							"        pm.expect(item.name).to.be.a(\"string\").and.not.empty;",
							"        pm.expect(item.description).to.be.a(\"string\").and.not.empty;",
							"    });",
							"});",
							"",
							"// 6. Assert 'createdAt' is a valid ISO date string",
							"pm.test(\"'createdAt' is a valid ISO date string\", function () {",
							"    jsonData.forEach(function (item) {",
							"        pm.expect(item.createdAt).to.be.a(\"string\");",
							"        // ISO 8601 regex",
							"        const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
							"        pm.expect(item.createdAt).to.match(isoRegex);",
							"        // Also check if it can be parsed as a date",
							"        pm.expect(!isNaN(Date.parse(item.createdAt))).to.be.true;",
							"    });",
							"});",
							"",
							"// 7. Assert '_id' is a non-empty string",
							"pm.test(\"'_id' is a non-empty string\", function () {",
							"    jsonData.forEach(function (item) {",
							"        pm.expect(item._id).to.be.a(\"string\").and.not.empty;",
							"    });",
							"});",
							"",
							"// 8. Assert '__v' is a number",
							"pm.test(\"'__v' is a number\", function () {",
							"    jsonData.forEach(function (item) {",
							"        pm.expect(item.__v).to.be.a(\"number\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:3000/api/community/characters"
			},
			"response": []
		},
		{
			"name": "Get a Specific Community Character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Assert the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Assert the response body is valid JSON",
							"let jsonData;",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        jsonData = pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Assert the response is an object",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"",
							"// 4. Assert the response contains the required properties",
							"pm.test(\"Response contains required properties\", function () {",
							"    pm.expect(jsonData).to.have.all.keys(\"_id\", \"name\", \"description\", \"createdAt\", \"__v\");",
							"});",
							"",
							"// 5. Assert that 'name' and 'description' are non-empty strings",
							"pm.test(\"'name' and 'description' are non-empty strings\", function () {",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData.description).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 6. Assert that 'createdAt' is a valid ISO date string",
							"pm.test(\"'createdAt' is a valid ISO date string\", function () {",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\");",
							"    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
							"    pm.expect(jsonData.createdAt).to.match(isoDateRegex);",
							"    pm.expect(new Date(jsonData.createdAt).toISOString()).to.eql(jsonData.createdAt);",
							"});",
							"",
							"// 7. Assert that '_id' is a non-empty string",
							"pm.test(\"'_id' is a non-empty string\", function () {",
							"    pm.expect(jsonData._id).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 8. Assert that '__v' is a number",
							"pm.test(\"'__v' is a number\", function () {",
							"    pm.expect(jsonData.__v).to.be.a(\"number\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:3000/api/community/characters/68f568d94581d557b4fd1440"
			},
			"response": []
		},
		{
			"name": "Create a Community Character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Assert the status code is 201",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// 2. Assert the response body is valid JSON",
							"let jsonData;",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        jsonData = pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Assert the response contains the required properties",
							"pm.test(\"Response contains required properties\", function () {",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"    pm.expect(jsonData).to.have.property(\"__v\");",
							"});",
							"",
							"// 4. Assert that 'name' and 'description' are non-empty strings",
							"pm.test(\"'name' and 'description' are non-empty strings\", function () {",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData.description).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 5. Assert that 'createdAt' is a valid ISO date string",
							"pm.test(\"'createdAt' is a valid ISO date string\", function () {",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\");",
							"    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
							"    pm.expect(jsonData.createdAt).to.match(isoDateRegex);",
							"    pm.expect(new Date(jsonData.createdAt).toISOString()).to.eql(jsonData.createdAt);",
							"});",
							"",
							"// 6. Assert that '_id' is a non-empty string",
							"pm.test(\"'_id' is a non-empty string\", function () {",
							"    pm.expect(jsonData._id).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 7. Assert that '__v' is a number",
							"pm.test(\"'__v' is a number\", function () {",
							"    pm.expect(jsonData.__v).to.be.a(\"number\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Mark Shu\",\r\n  \"description\": \"The Winner of the Ultimate Fighter Tournament\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/api/community/characters"
			},
			"response": []
		},
		{
			"name": "Edit a Community Character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Assert the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Assert the response body is valid JSON",
							"let jsonData;",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        jsonData = pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Assert the response is an object",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"",
							"// 4. Assert the response contains the required properties",
							"pm.test(\"Response contains required properties\", function () {",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");",
							"    pm.expect(jsonData).to.have.property(\"__v\");",
							"});",
							"",
							"// 5. Assert that 'name' and 'description' are non-empty strings",
							"pm.test(\"'name' and 'description' are non-empty strings\", function () {",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData.description).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 6. Assert that 'createdAt' is a valid ISO date string",
							"pm.test(\"'createdAt' is a valid ISO date string\", function () {",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\");",
							"    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
							"    pm.expect(jsonData.createdAt).to.match(isoDateRegex);",
							"    pm.expect(new Date(jsonData.createdAt).toISOString()).to.eql(jsonData.createdAt);",
							"});",
							"",
							"// 7. Assert that '_id' is a non-empty string",
							"pm.test(\"'_id' is a non-empty string\", function () {",
							"    pm.expect(jsonData._id).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 8. Assert that '__v' is a number",
							"pm.test(\"'__v' is a number\", function () {",
							"    pm.expect(jsonData.__v).to.be.a(\"number\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Mark Shu\",\r\n  \"description\": \"The Previous Winner of the Ultimate Fighter Tournament\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/api/community/characters/68f568d94581d557b4fd1440"
			},
			"response": []
		},
		{
			"name": "Delete a Community Character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Assert the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Assert the response body is valid JSON",
							"let jsonData;",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        jsonData = pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Assert the response is an object",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"",
							"// 4. Assert the response contains the required properties",
							"pm.test(\"Response contains required properties\", function () {",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");",
							"    pm.expect(jsonData).to.have.property(\"__v\");",
							"});",
							"",
							"// 5. Assert that 'name' and 'description' are non-empty strings",
							"pm.test(\"'name' and 'description' are non-empty strings\", function () {",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;",
							"    pm.expect(jsonData.description).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 6. Assert that 'createdAt' is a valid ISO date string",
							"pm.test(\"'createdAt' is a valid ISO date string\", function () {",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\");",
							"    // ISO 8601 date regex",
							"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
							"    pm.expect(jsonData.createdAt).to.match(iso8601Regex);",
							"    // Also check if it can be parsed as a date",
							"    pm.expect(new Date(jsonData.createdAt).toString()).to.not.equal(\"Invalid Date\");",
							"});",
							"",
							"// 7. Assert that '_id' is a non-empty string",
							"pm.test(\"'_id' is a non-empty string\", function () {",
							"    pm.expect(jsonData._id).to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"// 8. Assert that '__v' is a number",
							"pm.test(\"'__v' is a number\", function () {",
							"    pm.expect(jsonData.__v).to.be.a(\"number\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:3000/api/community/characters/68f56bbf1a2bbd9a6e030b88"
			},
			"response": []
		}
	]
}