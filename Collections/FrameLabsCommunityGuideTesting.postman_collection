{
	"info": {
		"_postman_id": "f07ed759-6309-442d-b512-5c7db6fa3e65",
		"name": "FrameLabs Community Guide Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49332072",
		"_collection_link": "https://michael-myers-lab-2-submission.postman.co/workspace/SWENG-465-POSTMAN~e608a5a6-88f8-422c-ad14-2a0448265ed4/collection/42860946-f07ed759-6309-442d-b512-5c7db6fa3e65?action=share&source=collection_link&creator=49332072"
	},
	"item": [
		{
			"name": "Get All Community Guides",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Test that the response status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Test that the response body is a valid JSON array",
							"pm.test(\"Response body is a valid JSON array\", function () {",
							"    var jsonData;",
							"    pm.expect(function () {",
							"        jsonData = pm.response.json();",
							"    }).to.not.throw();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"});",
							"",
							"// 3. Test that each object in the array contains '_id', 'title', and 'description' fields",
							"pm.test(\"Each object contains required fields (_id, title, description)\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.forEach(function (item, idx) {",
							"        pm.expect(item).to.have.property('_id');",
							"        pm.expect(item).to.have.property('title');",
							"        pm.expect(item).to.have.property('description');",
							"    });",
							"});",
							"",
							"// 4. Test that the array is not empty",
							"pm.test(\"Array is not empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/community/guide",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"community",
						"guide"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Specific Community Guide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Test that the response status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Test that the response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).to.not.throw();",
							"});",
							"",
							"// 3. Test that the response contains the required fields",
							"pm.test(\"Response contains _id, title, and description fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"    pm.expect(jsonData).to.have.property(\"title\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"});",
							"",
							"// 4. Test that the _id field matches the guide ID in the request URL",
							"pm.test(\"_id field matches guide ID in request URL\", function () {",
							"    var jsonData = pm.response.json();",
							"    // Extract guide ID from request URL",
							"    var url = pm.request.url.toString();",
							"    var match = url.match(/\\/guide\\/([a-fA-F0-9]+)/);",
							"    pm.expect(match).to.not.be.null;",
							"    var guideId = match[1];",
							"    pm.expect(jsonData._id).to.eql(guideId);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/community/guide/68f104a1314f9ca8225c7546",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"community",
						"guide",
						"68f104a1314f9ca8225c7546"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Community Guide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Status code is 201",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test 2: Response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).not.to.throw();",
							"});",
							"",
							"// Parse response JSON for further tests",
							"let jsonData;",
							"try {",
							"    jsonData = pm.response.json();",
							"} catch (e) {",
							"    jsonData = null;",
							"}",
							"",
							"// Test 3: Response contains expected 'title' and 'description'",
							"pm.test(\"Response contains correct 'title' and 'description'\", function () {",
							"    pm.expect(jsonData).to.have.property(\"title\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"});",
							"",
							"// Test 4: Response contains an '_id' field",
							"pm.test(\"Response contains an '_id' field\", function () {",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"    pm.expect(jsonData._id).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"New Advanced Guide\",\r\n  \"description\": \"The New Best Guide for Veteran Players\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/community/guide",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"community",
						"guide"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit a Community Guide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Response body is valid JSON",
							"pm.test(\"Response body is valid JSON\", function () {",
							"    pm.expect(function () {",
							"        pm.response.json();",
							"    }).not.to.throw();",
							"});",
							"",
							"// 3. Response contains required fields",
							"pm.test(\"Response contains _id, title, and description\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"    pm.expect(jsonData).to.have.property(\"title\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"});",
							"",
							"// 4. 'title' and 'description' match request body",
							"pm.test(\"'title' and 'description' match request body\", function () {",
							"    var jsonData = pm.response.json();",
							"    var requestBody = JSON.parse(request.data);",
							"    pm.expect(jsonData.title).to.eql(requestBody.title);",
							"    pm.expect(jsonData.description).to.eql(requestBody.description);",
							"});",
							"",
							"// 5. '_id' matches guide ID in request URL",
							"pm.test(\"'_id' matches guide ID in request URL\", function () {",
							"    var jsonData = pm.response.json();",
							"    var urlParts = pm.request.url.path;",
							"    var guideId = urlParts[urlParts.length - 1];",
							"    pm.expect(jsonData._id).to.eql(guideId);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"New Advanced Guide\",\r\n  \"description\": \"The New Best Guide for Veteran Players\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/community/guide/68f104a1314f9ca8225c7546",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"community",
						"guide",
						"68f104a1314f9ca8225c7546"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Community Guide",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/api/community/guide/68f104a1314f9ca8225c7546",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"community",
						"guide",
						"68f104a1314f9ca8225c7546"
					]
				}
			},
			"response": []
		}
	]
}